// Generated by CoffeeScript 1.3.3
(function() {
  var Account, User, chai, expect, nm, nt, settings, should,
    _this = this;

  chai = require('chai');

  should = chai.should();

  expect = chai.expect;

  nt = require('../noxious/noxious_types.js');

  nm = require('../noxious/noxious_maker.js');

  User = (function() {

    function User() {
      this.name = new nt.TextField(20);
      this.surname = new nt.TextField(30);
      this.accounts = new nt.ArrayField('account');
    }

    return User;

  })();

  Account = (function() {

    function Account() {
      this.number = new nt.TextField(10);
    }

    return Account;

  })();

  settings = {
    name: 'test'
  };

  describe('Maker', function() {
    var m;
    m = new nm.Maker(settings);
    after(function(done) {
      m.destroy_db();
      return done();
    });
    describe('.constructor()', function() {
      return it('should construct a maker object', function(done) {
        expect(m.templates).to.be.a('Object');
        return done();
      });
    });
    describe('.register_template(template_name,template,mapper)', function() {
      var keys;
      m.register_template('user', User);
      m.register_template('account', Account);
      keys = Object.keys(m.templates);
      it('should register only the template specified', function(done) {
        keys.length.should.equal(2);
        return done();
      });
      it('should add the template with the specidfied key', function(done) {
        keys[0].should.equal('user');
        return done();
      });
      it('should add the correct type for the specified key', function(done) {
        (m.templates['user'].template instanceof User).should.equal(true);
        return done();
      });
      it('should not add a mapper if it wasnt specified', function(done) {
        should.not.exist(m.templates['user'].mapper);
        return done();
      });
      it('should add extra templates', function(done) {
        m.register_template('user2', User, function(i) {
          return i;
        });
        keys = Object.keys(m.templates);
        keys.length.should.equal(3);
        return done();
      });
      return it('should add a mapper if specified', function(done) {
        expect(m.templates['user2'].mapper).to.be.a('Function');
        return done();
      });
    });
    describe('.create_instance(template_name,source)', function() {
      it('should create a default instance of the type specified if no source is specified', function(done) {
        var o;
        o = m.create_instance('user');
        o.name.should.equal('');
        o.surname.should.equal('');
        expect(o.accounts).to.be.a('Array');
        o.accounts.length.should.equal(0);
        return done();
      });
      return it('should create an instance of the type specified and populate it with the data from the source', function(done) {
        var account, o, x, _i, _len, _ref;
        o = m.create_instance('user', {
          name: 'johan',
          surname: 'jordaan',
          accounts: [
            {
              number: '123'
            }, {
              number: '321'
            }
          ]
        });
        o.name.should.equal('johan');
        o.surname.should.equal('jordaan');
        o.accounts.length.should.equal(2);
        x = (function() {
          var _i, _len, _ref, _results;
          _ref = o.accounts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            account = _ref[_i];
            _results.push(account);
          }
          return _results;
        })();
        _ref = o.accounts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          account = _ref[_i];
          (account.__type instanceof Account).should.equal(true);
        }
        return done();
      });
    });
    return describe('.save()', function() {
      return it('should save', function(done) {
        var o;
        o = m.create_instance('user', {
          name: 'johan',
          surname: 'jordaan',
          accounts: [
            {
              number: '123'
            }, {
              number: '321'
            }
          ]
        });
        o.save();
        return done();
      });
    });
  });

}).call(this);
